<?php

/**
 * RAZOR EXCEPTION OBJECT
 * Generated by Razor functions when an exception is thrown
 *
 * @version 3.2
 * @since 3.2
 * @package Razor
 * @subpackage Exception
 * @license GPL v2.0
 * @link https://code.google.com/p/wp-razor/
 *
 * ========================================================================================================
 */

class RAZ_exception extends Exception {


	var $data;			    // Error data


	// ============================================================================================================ //


	public function  __construct($data) {

		$this->data = $data;
	}

	public function dump($depth=null){


		if($depth == 1){

			BPM_debug::dump($this->data);
		}
		else {

			BPM_debug::dump( BPM_debug::formatError_print($this->data, $depth));
		}

	}

	public function dumpString($args=null){


		if(is_array($args)){

			return self::dumpString_iterator($args['depth'], $this, $args);
		}
		else {

			return self::dumpString_iterator($args, $this);
		}

	}


	public function dumpString_iterator($depth, $obj, $ctrl=null){

		$pos_1 = strrpos($obj->data['file'], "/");	// Linux
		$pos_2 = strrpos($obj->data['file'], "\\");	// Windows

		$offset = max($pos_1, $pos_2);
		$length = strlen($obj->data['file']);

		$file = substr($obj->data['file'], $offset + 1, ($length - $offset));

		$result .= "\nCODE: " . $obj->data['numeric'] ."\n";
		$result .= "TEXT: " . $obj->data['text'] ."\n";
		$result .= "FILE: " . $file ."\n";
		$result .= "LINE: " . $obj->data['line'] ."\n";

		if( ($ctrl['data'] == true) ){

			$result .= "DATA: " . BPM_debug::dumpToString($obj->data['data']);
		}

		if( is_object($obj->data['child']) && ($depth > 0) ){

			$result .= self::dumpString_iterator($depth-1, $obj->data['child'], $ctrl);
		}

		return $result;

	}


} // End of class RAZ_exception

?>